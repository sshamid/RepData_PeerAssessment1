q()
quit()
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
dataset_317_1 <- read.delim("~/core_dala_analysis/dataset_317_1.txt")
View(dataset_317_1)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
my _ seq <- seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect < 1]
tf <- num_vect[[num_vect < 1]]
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "shamid")
my_name
paste(my_name, collapse = " ")
paste("Hello" , "world!", sep = " ")
paste(c(1, 2, 3), c"X", "Y", "Z"), sep = "")
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData, cnames)
colnames(myData) <- cnames
myData
cube <- function(x, n) {
x^3
}
cube(3)
setwd("~/datasciencecoursera")
setwd("~/datasciencecoursera/ReproducibleResearch/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
data <- data[complete.cases(data), ]
data <- data[, 1:2]
library(reshape2)
melted_data <- melt(data, id.vars="date")
tdset <- dcast(melted_data, date ~ variable, sum)
library("ggplot2")
library("scales")
tdset$date <- as.Date(tdset$date)
unzip("activity.zip")
unzip("activity.zip")
data <- read.csv("activity.csv")
data <- data[complete.cases(data), ]
data <- data[, 1:2]
library(reshape2)
melted_data <- melt(data, id.vars="date")
tdset <- dcast(melted_data, date ~ variable, sum)
library("ggplot2")
library("scales")
tdset$date <- as.Date(tdset$date)
mean_steps <- mean(tdset$steps)
median_steps <- median(tdset$steps)
ggplot(tdset, aes(x=steps)) +
geom_histogram(fill="steelblue", binwidth=1500) +
geom_point(aes(x=mean_steps, y=0, color="green"), size=4, shape=15) +
geom_point(aes(x=median_steps, y=0, color="yellow"), size=4, shape=15) +
scale_color_manual(name=element_blank(), labels=col_labels, values=cols) +
labs(title="Histogram of Steps Taken per Day", x="Number of Steps", y="Count") +
theme_bw() + theme(legend.position = "bottom")
mean_steps <- mean(tdset$steps)
median_steps <- median(tdset$steps)
ggplot(tdset, aes(x=steps)) +
geom_histogram(fill="steelblue", binwidth=1500) +
geom_point(aes(x=mean_steps, y=0, color="green"), size=4, shape=15) +
geom_point(aes(x=median_steps, y=0, color="yellow"), size=4, shape=15) +
scale_color_manual(name=element_blank()) +
labs(title="Histogram of Steps Taken per Day", x="Number of Steps", y="Count") +
theme_bw() + theme(legend.position = "bottom")
ggplot(tdset, aes(x=steps)) +
geom_histogram(fill="steelblue", binwidth=1500) +
geom_point(aes(x=mean_steps, y=0, color="green"), size=4, shape=15) +
geom_point(aes(x=median_steps, y=0, color="yellow"), size=4, shape=15) +
labs(title="Histogram of Steps Taken per Day", x="Number of Steps", y="Count") +
theme_bw() + theme(legend.position = "bottom")
qplot(x=date, y=steps,
data=tdset,
stat='summary', geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
his <- qplot(x=date, y=steps,
data=tdset,
stat='summary', geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
plot(hist)
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(activity)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
plot(histogram)
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(data)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
plot(histogram)
?qplot
data <- read.csv("activity.csv")
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(data)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
plot(histogram)
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(data)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')+ theme_bw() +
xlab(NULL) + opts(axis.text.x  = theme_text(angle=45,
hjust = 1,
vjust = 1))
plot(histogram)
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(data)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')+ opts(axis.text.x  = theme_text(angle=45,
hjust = 1,
vjust = 1))
plot(histogram)
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(data)),
stat='summary', fun.y=sum, geom='bar') +
+ scale_x_date(breaks = seq(min(tdset$num)-20, # change -20 term to taste
max(tdset$num),
bin),
labels = date_format("%m-%d"),
limits = c(as.Date("2012-10-02"),
as.Date("2012-11-2")))+
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
plot(histogram)
data <- data[complete.cases(data), ]
histogram <-
qplot(x=date, y=steps,
data=subset(data, complete.cases(data)),
stat='summary', geom='bar') +
+ scale_x_date(breaks = seq(min(tdset$num)-20, # change -20 term to taste
max(tdset$num),
bin),
labels = date_format("%m-%d"),
limits = c(as.Date("2012-10-02"),
as.Date("2012-11-2")))+
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
plot(histogram)
data <- data[complete.cases(data), 1:2]
melted_data <- melt(data, id.vars="date")
tdset <- dcast(melted_data, date ~ variable, sum)
?barplot
barplot(tdset$steps)
data <- read.csv("activity.csv")
data2 <- data[complete.cases(data), 1:2]
?barplot
barplot(tdset$steps, names.arg = tdset$date, angle = 45)
?barplot
?quantile
View(data)
data3 <- data[complete.cases(data), c(steps, interval)]
data3 <- data[complete.cases(data), c(step, interval)]
data3 <- data[complete.cases(data), c(steps, interval)
data3 <- data[complete.cases(data), c(steps, interval)]
names(data)
head(data[, c(steps,interval)])
data3 <- data[complete.cases(data), c("steps", "interval")]
plot(tdset2, type = "l")
data3 <- data[complete.cases(data), c("steps", "interval")]
melted_data2 <- melt(data3, id.vars="interval")
tdset2 <- dcast(melted_data2, interval ~ variable, mean)
plot(tdset2, type = "l")
max(tdset2)
head(tdset2)
head(tdset2$steps)
max(tdset2$steps)
tdset2$interval[which.max(tdset2$steps)]
data[is.na(data),]
data[is.na(data)]
?weekdays
weekdays(data$date)
weekdays(as.Date(data$date))
?or
??or
newdata <- data
newdata[is.na(newdata)] <- mean(tdset2$steps)
melted_data3 <- melt(newdata[,1:2], id.vars="date")
tdset3 <- dcast(melted_data3, date ~ variable, sum)
head(tdset3)
newdata <- data
newdata[is.na(newdata)] <- mean(tdset2$steps)
melted_data3 <- melt(newdata[,], id.vars="date")
tdset3 <- dcast(melted_data3, date ~ variable, sum)
head(tdset3)
head(newdata)
daysID <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")  ) {
"weekend"
}
else {
"weekday"
}
}
newdata$daysID <- as.factor(sapply(newdata$date, daysID))
tail(newdata)
